DBNParser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          + '"';
      }

      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }

      function parse_start(context) {
        var cacheKey = "start" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result1 = parse_call(context);
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result1 = parse_call(context);
          }
        } else {
          var result0 = null;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_call(context) {
        var cacheKey = "call" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result8 = parse_block_command(context);
        if (result8 !== null) {
          var result2 = result8;
        } else {
          var result7 = parse_command(context);
          if (result7 !== null) {
            var result2 = result7;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_ws(context);
          while (result6 !== null) {
            result3.push(result6);
            var result6 = parse_ws(context);
          }
          if (result3 !== null) {
            var result4 = [];
            var result5 = parse_lb(context);
            while (result5 !== null) {
              result4.push(result5);
              var result5 = parse_lb(context);
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(command) { return command })(result1[0])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_command(context) {
        var cacheKey = "command" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = [];
        var result13 = parse_ws(context);
        while (result13 !== null) {
          result2.push(result13);
          var result13 = parse_ws(context);
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[A-Za-z0-9?]/) !== null) {
            var result12 = input.charAt(pos);
            pos++;
          } else {
            var result12 = null;
            if (context.reportMatchFailures) {
              matchFailed("[A-Za-z0-9?]");
            }
          }
          if (result12 !== null) {
            var result3 = [];
            while (result12 !== null) {
              result3.push(result12);
              if (input.substr(pos).match(/^[A-Za-z0-9?]/) !== null) {
                var result12 = input.charAt(pos);
                pos++;
              } else {
                var result12 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[A-Za-z0-9?]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var result11 = parse_ws(context);
            if (result11 !== null) {
              var result9 = [];
              while (result11 !== null) {
                result9.push(result11);
                var result11 = parse_ws(context);
              }
            } else {
              var result9 = null;
            }
            if (result9 !== null) {
              var result10 = parse_value(context);
              if (result10 !== null) {
                var result8 = [result9, result10];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
            if (result8 !== null) {
              var result7 = [];
              while (result8 !== null) {
                result7.push(result8);
                var savedPos1 = pos;
                var result11 = parse_ws(context);
                if (result11 !== null) {
                  var result9 = [];
                  while (result11 !== null) {
                    result9.push(result11);
                    var result11 = parse_ws(context);
                  }
                } else {
                  var result9 = null;
                }
                if (result9 !== null) {
                  var result10 = parse_value(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              }
            } else {
              var result7 = null;
            }
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result6 = parse_lb(context);
              if (result6 !== null) {
                var result5 = [];
                while (result6 !== null) {
                  result5.push(result6);
                  var result6 = parse_lb(context);
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(cmd, args) {
               return {
                   type: "command",
                   name: cmd.join("").toLowerCase(),
                   args: args ? args.map(function(a) { return a[1] }) : null
               }
             })(result1[1], result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_block(context) {
        var cacheKey = "block" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("{"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result12 = parse_lb(context);
          while (result12 !== null) {
            result3.push(result12);
            var result12 = parse_lb(context);
          }
          if (result3 !== null) {
            var result11 = parse_block_command(context);
            if (result11 !== null) {
              var result9 = result11;
            } else {
              var result10 = parse_command(context);
              if (result10 !== null) {
                var result9 = result10;
              } else {
                var result9 = null;;
              };
            }
            if (result9 !== null) {
              var result4 = [];
              while (result9 !== null) {
                result4.push(result9);
                var result11 = parse_block_command(context);
                if (result11 !== null) {
                  var result9 = result11;
                } else {
                  var result10 = parse_command(context);
                  if (result10 !== null) {
                    var result9 = result10;
                  } else {
                    var result9 = null;;
                  };
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result5 = [];
              var result8 = parse_lb(context);
              while (result8 !== null) {
                result5.push(result8);
                var result8 = parse_lb(context);
              }
              if (result5 !== null) {
                var result6 = parse__(context);
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("}"));
                    }
                  }
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e) { return e })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_block_command(context) {
        var cacheKey = "block_command" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_command(context);
        if (result2 !== null) {
          var result3 = parse__(context);
          if (result3 !== null) {
            var result4 = parse_block(context);
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_lb(context);
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_lb(context);
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e, b) {
               e.block = b;
               return e;
          })(result1[0], result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_variable(context) {
        var cacheKey = "variable" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[A-Za-z]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[A-Za-z]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[A-Za-z]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[A-Za-z]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(v) { return { type: "string", value: v.join("") } })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_integer(context) {
        var cacheKey = "integer" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(digits) { return { type: "integer", value: parseInt(digits.join(""), 10) } })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_point(context) {
        var cacheKey = "point" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result2 = "[";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("["));
          }
        }
        if (result2 !== null) {
          var result3 = parse_value(context);
          if (result3 !== null) {
            var result4 = parse_ws(context);
            if (result4 !== null) {
              var result5 = parse_value(context);
              if (result5 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result6 = "]";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("]"));
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(left, right) { return { type: "point", x:left, y:right } })(result1[1], result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_special(context) {
        var cacheKey = "special" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "<") {
          var result2 = "<";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("<"));
          }
        }
        if (result2 !== null) {
          var result3 = parse__(context);
          if (result3 !== null) {
            var result4 = parse_variable(context);
            if (result4 !== null) {
              var savedPos1 = pos;
              var result8 = parse_ws(context);
              if (result8 !== null) {
                var result9 = parse_value(context);
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              if (result7 !== null) {
                var result5 = [];
                while (result7 !== null) {
                  result5.push(result7);
                  var savedPos1 = pos;
                  var result8 = parse_ws(context);
                  if (result8 !== null) {
                    var result9 = parse_value(context);
                    if (result9 !== null) {
                      var result7 = [result8, result9];
                    } else {
                      var result7 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result6 = ">";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(">"));
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(left, args) {
              return {
                      type: "special",
                      args: [left, args.map(function(a) { return a[1] })]
              }
          })(result1[2], result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_additive(context) {
        var cacheKey = "additive" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_muldiv(context);
        if (result4 !== null) {
          var result5 = parse__(context);
          if (result5 !== null) {
            if (input.substr(pos).match(/^[+\-]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed("[+\\-]");
              }
            }
            if (result6 !== null) {
              var result7 = parse__(context);
              if (result7 !== null) {
                var result8 = parse_additive(context);
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(left, sign, right) { return { type: "command", name:sign, args:[left,right] }})(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_muldiv(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_muldiv(context) {
        var cacheKey = "muldiv" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_primary(context);
        if (result4 !== null) {
          var result5 = parse__(context);
          if (result5 !== null) {
            if (input.substr(pos).match(/^[*\/]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed("[*\\/]");
              }
            }
            if (result6 !== null) {
              var result7 = parse__(context);
              if (result7 !== null) {
                var result8 = parse_muldiv(context);
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(left, sign, right) {
                  return { type: "command", name: sign, args:[left, right] }
              })(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_primary(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_primary(context) {
        var cacheKey = "primary" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result11 = parse_variable(context);
        if (result11 !== null) {
          var result8 = result11;
        } else {
          var result10 = parse_integer(context);
          if (result10 !== null) {
            var result8 = result10;
          } else {
            var result9 = parse_special(context);
            if (result9 !== null) {
              var result8 = result9;
            } else {
              var result8 = null;;
            };
          };
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result3 !== null) {
            var result4 = parse__(context);
            if (result4 !== null) {
              var result5 = parse_additive(context);
              if (result5 !== null) {
                var result6 = parse__(context);
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(additive) { return additive; })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_value(context) {
        var cacheKey = "value" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result5 = parse_variable(context);
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_integer(context);
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_additive(context);
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_point(context);
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_special(context);
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ws(context) {
        var cacheKey = "ws" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[ 	]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[ 	]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse__(context) {
        var cacheKey = "_" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result0 = [];
        var result1 = parse_ws(context);
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_ws(context);
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_lb(context) {
        var cacheKey = "lb" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === "\n") {
          var result0 = "\n";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\n"));
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



      var result = parse_start({ reportMatchFailures: true });

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();
